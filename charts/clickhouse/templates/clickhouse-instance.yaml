apiVersion: "clickhouse.altinity.com/v1"
kind: "ClickHouseInstallation"
metadata:
  name: "signoz"
spec:
  defaults:
    templates:
      {{- if and (.Values.persistence.enabled) (not .Values.persistence.existingClaim) }}
      dataVolumeClaimTemplate: data-volumeclaim-template
      # logVolumeClaimTemplate: data-volumeclaim-template
      {{- end }}
      serviceTemplate: service-template
  configuration:
    users:
      {{ .Values.user }}/password: {{ .Values.password }}
      {{ .Values.user }}/networks/ip: "0.0.0.0/0"
      {{ .Values.user }}/profile: default
      {{ .Values.user }}/quota: default

    profiles:
      {{- merge dict .Values.profiles .Values.defaultProfiles | toYaml | nindent 6 }}

    clusters:
      - name: {{ .Values.cluster | quote }}
        templates:
          podTemplate: pod-template
        layout:
          shardsCount: {{ .Values.shardsCount }}
          replicasCount: {{ .Values.replicasCount }}

    settings:
      format_schema_path: /etc/clickhouse-server/config.d/

    files:
      events.proto: |
        syntax = "proto3";
        message Event {
          string uuid = 1;
          string event = 2;
          string properties = 3;
          string timestamp = 4;
          uint64 team_id = 5;
          string distinct_id = 6;
          string created_at = 7;
          string elements_chain = 8;
        }
      {{- if .Values.coldStorage.enabled }}
      config.d/storage.xml: |
        <yandex>
          <storage_configuration>
            <disks>
              <!--
                default disk is special, it always exists even if not explicitly configured here,
                but you can't change it's path here (you should use <path> on top level config instead)
              -->
              <default>
                <!--
                  You can reserve some amount of free space on any disk (including default) by adding
                  keep_free_space_bytes tag.
                -->
                <keep_free_space_bytes>{{ .Values.coldStorage.defaultKeepFreeSpaceBytes }}</keep_free_space_bytes>
              </default>

              <s3>
                <type>s3</type>
                <endpoint>{{ .Values.coldStorage.endpoint }}</endpoint>
              {{- if .Values.coldStorage.role.enabled }}
                  <use_environment_credentials>true</use_environment_credentials>
                {{- else }}
                <access_key_id>{{ .Values.coldStorage.accessKey }}</access_key_id>
                <secret_access_key>{{ .Values.coldStorage.secretAccess }}</secret_access_key>
              {{- end }}
              </s3>
            </disks>
            <policies>
              <tiered>
                <volumes>
                  <default>
                    <disk>default</disk>
                  </default>
                  <s3>
                    <disk>s3</disk>
                  </s3>
                </volumes>
              </tiered>
            </policies>
          </storage_configuration>
        </yandex>
      {{- end }}

    zookeeper:
      nodes:
      {{- if .Values.externalZookeeper }}
      {{ toYaml .Values.externalZookeeper.servers | indent 4 }}
      {{- else }}
        - host: {{ include "clickhouse.zookeeper.servicename" . }}
          port: {{ include "clickhouse.zookeeper.port" . }}
      {{- end }}

  templates:
    podTemplates:
      - name: pod-template
        spec:
          {{- if .Values.coldStorage.role.enabled }}
          serviceAccountName: clickhouse-instance
          {{- end }}

          {{- if .Values.affinity }}
          affinity: {{ toYaml .Values.affinity | nindent 12 }}
          {{- end }}
          {{- if .Values.tolerations }}
          tolerations: {{ toYaml .Values.tolerations | nindent 12 }}
          {{- end }}
          {{- if .Values.nodeSelector }}
          nodeSelector: {{ toYaml .Values.nodeSelector | nindent 12 }}
          {{- end }}
          {{- if .Values.persistence.enabled }}
          volumes:
            {{- if .Values.persistence.existingClaim }}
            - name: existing-volumeclaim
              persistentVolumeClaim:
                claimName: {{ .Values.persistence.existingClaim }}
            {{- else }}
            - name: data-volumeclaim-template
              persistentVolumeClaim:
                claimName: data-volumeclaim-template
            {{- end }}
          {{- end }}

          {{- if .Values.securityContext.enabled }}
          securityContext: {{- omit .Values.securityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          containers:
            - name: clickhouse
              image: {{ template "clickhouse.image" . }}
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command:
                - /bin/bash
                - -c
                - /usr/bin/clickhouse-server --config-file=/etc/clickhouse-server/config.xml

              ports:
                - name: http
                  containerPort: 8123
                - name: client
                  containerPort: 9000
                - name: interserver
                  containerPort: 9009

              {{- if .Values.persistence.enabled }}
              volumeMounts:
              {{- if .Values.persistence.existingClaim }}
                - name: existing-volumeclaim
              {{- else }}
                - name: data-volumeclaim-template
              {{- end }}
                  mountPath: /var/lib/clickhouse
              {{- end }}
              {{- if .Values.resources }}
              resources: {{ toYaml .Values.resources | nindent 16 }}
              {{- end }}

    serviceTemplates:
      - name: service-template
        generateName: {{ include "clickhouse.fullname" . }}
        spec:
          ports:
            - name: http
              port: 8123
            - name: tcp
              port: 9000
          type: {{ .Values.serviceType | quote }}

    {{- if and (.Values.persistence.enabled) (not .Values.persistence.existingClaim) }}
    volumeClaimTemplates:
      - name: data-volumeclaim-template
        spec:
          {{- if .Values.persistence.storageClass }}
          storageClassName: {{ .Values.persistence.storageClass }}
          {{- end }}
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: {{ .Values.persistence.size | quote }}
    {{- end }}
