apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "clickhouseOperator.fullname" . }}-etc-files
  namespace: {{ .Values.namespace | default .Release.Namespace }}
  labels:
    {{- include "clickhouseOperator.labels" . | nindent 4 }}
data:
  config.yaml: |
      #
      # Template parameters available:
      #   WATCH_NAMESPACES=
      #   CH_USERNAME_PLAIN=
      #   CH_PASSWORD_PLAIN=
      #   CH_CREDENTIALS_SECRET_NAMESPACE=
      #   CH_CREDENTIALS_SECRET_NAME=clickhouse-operator

      ################################################
      ##
      ## Watch Section
      ##
      ################################################
      watch:
        # List of namespaces where clickhouse-operator watches for events.
        # Concurrently running operators should watch on different namespaces.
        #namespaces: ["dev", "test"]
        namespaces: []

      clickhouse:
        configuration:
          ################################################
          ##
          ## Configuration Files Section
          ##
          ################################################
          file:
            path:
              # Path to the folder where ClickHouse configuration files common for all instances within a CHI are located.
              common: config.d
              # Path to the folder where ClickHouse configuration files unique for each instance (host) within a CHI are located.
              host: conf.d
              # Path to the folder where ClickHouse configuration files with users' settings are located.
              # Files are common for all instances within a CHI.
              user: users.d
          ################################################
          ##
          ## Configuration Users Section
          ##
          ################################################
          user:
            # Default settings for user accounts, created by the operator.
            # NB. These are not access credentials or settings for 'default' user account,
            # it is a template for filling out missing fields for all user accounts to be created by the operator, except:
            # 1. 'default' account, which DOES NOT use provided password, but uses all the rest of the fields
            # Password for 'default' account as to be provided explicitly, if to be used
            # 2. CHOP account, which DOES NOT use profile, quota, password and regexp, but uses network IPs - extending them
            # Password for CHOP account is used from `clickhouse.access.password` section
            default:
              # Default values for ClickHouse user configuration
              # 1. user/profile - string
              # 2. user/quota - string
              # 3. user/networks/ip - multiple strings
              # 4. user/password - string
              profile: "default"
              quota: "default"
              networksIP:
                - "::1"
                - "127.0.0.1"
              password: "default"
          ################################################
          ##
          ## Configuration Network Section
          ##
          ################################################
          network:
            # Default host_regexp to limit network connectivity from outside
            hostRegexpTemplate: "(chi-{chi}-[^.]+\\d+-\\d+|clickhouse\\-{chi})\\.{namespace}\\.svc\\.cluster\\.local$"

        ################################################
        ##
        ## Configuration Restart Policy Section
        ## Configuration restart policy describes what configuration changes require ClickHouse restart
        ##
        ################################################
        configurationRestartPolicy:
          rules:
            - version: "*"
              rules:
                - settings/*: "yes"
                - settings/dictionaries_config: "no"
                - settings/logger: "no"
                - settings/macros/*: "no"
                - settings/max_server_memory_*: "no"
                - settings/max_*_to_drop: "no"
                - settings/max_concurrent_queries: "no"
                - settings/models_config: "no"
                - settings/user_defined_executable_functions_config: "no"

                - zookeeper/*: "yes"

                - files/config.d/*.xml: "yes"
                - files/config.d/*dict*.xml: "no"

                - profiles/default/background_*_pool_size: "yes"
                - profiles/default/max_*_for_server: "yes"
            - version: "21.*"
              rules:
                - settings/logger: "yes"

        #################################################
        ##
        ## Access to ClickHouse instances
        ##
        ################################################
        access:
          # Possible values for `scheme` are:
          # 1. http
          # 2. https
          scheme: ""
          # ClickHouse credentials (username, password and port) to be used by the operator to connect to ClickHouse instances.
          # Used for:
          # 1. Metrics requests
          # 2. Schema maintenance
          # 3. DROP DNS CACHE
          # User with these credentials can be specified in additional ClickHouse .xml config files,
          # located in `clickhouse.configuration.file.path.user` folder
          username: ""
          password: ""
          rootCA: ""

          # Location of the k8s Secret with username and password to be used by the operator to connect to ClickHouse instances.
          # Can be used instead of explicitly specified username and password which are:
          # clickhouse.access.username
          # clickhouse.access.password
          # Secret should have two keys:
          # 1. username
          # 2. password
          secret:
            # Empty `namespace` means that k8s secret would be looked in the same namespace where operator's pod is running.
            namespace: ""
            # Empty `name` means no k8s Secret would be looked for
            name: "{{ include "clickhouseOperator.fullname" . }}"
          # Port where to connect to ClickHouse instances to
          port: 8123

          # Timeouts used to limit connection and queries from the operator to ClickHouse instances
          # Specified in seconds.
          timeouts:
            connect: 2
            query: 5

        metrics:
          timeouts:
            collect: 9

      ################################################
      ##
      ## Templates Section
      ##
      ################################################
      template:
        chi:
          # Path to the folder where ClickHouseInstallation .yaml manifests are located.
          # Manifests are applied in sorted alpha-numeric order.
          path: templates.d

      ################################################
      ##
      ## Reconcile Section
      ##
      ################################################
      reconcile:
        runtime:
          # Max number of concurrent CHI reconciles in progress
          reconcileCHIsThreadsNumber: 10
          # Max number of concurrent shard reconciles in progress
          reconcileShardsThreadsNumber: 1
          # The maximum percentage of cluster shards that may be reconciled in parallel
          reconcileShardsMaxConcurrencyPercent: 50

        statefulSet:
          create:
            # What to do in case created StatefulSet is not in 'Ready' after `reconcile.statefulSet.update.timeout` seconds
            # Possible options:
            # 1. abort - do nothing, just break the process and wait for an admin to assist
            # 2. delete - delete newly created problematic StatefulSet
            # 3. ignore - ignore an error, pretend nothing happened and move on to the next StatefulSet
            onFailure: ignore

          update:
            # How many seconds to wait for created/updated StatefulSet to be 'Ready'
            timeout: 300
            # How many seconds to wait between checks/polls for created/updated StatefulSet status
            pollInterval: 5
            # What to do in case updated StatefulSet is not in 'Ready' after `reconcile.statefulSet.update.timeout` seconds
            # Possible options:
            # 1. abort - do nothing, just break the process and wait for an admin to assist
            # 2. rollback - delete Pod and rollback StatefulSet to previous Generation.
            # Pod would be recreated by StatefulSet based on rollback-ed configuration
            # 3. ignore - ignore an error, pretend nothing happened and move on to the next StatefulSet
            onFailure: rollback

        host:
          # Whether reconciler should wait for a host:
          # - to be excluded from a cluster
          # OR
          # - to be included into a cluster
          # respectfully
          wait:
            exclude: true
            include: false

      ################################################
      ##
      ## Annotations management
      ##
      ################################################
      annotation:
        # Applied when:
        #  1. Propagating annotations from the CHI's `metadata.annotations` to child objects' `metadata.annotations`,
        #  2. Propagating annotations from the CHI Template's `metadata.annotations` to CHI's `metadata.annotations`,
        # Include annotations from the following list:
        # Applied only when not empty. Empty list means "include all, no selection"
        include: []
        # Exclude annotations from the following list:
        exclude: []

      ################################################
      ##
      ## Labels management
      ##
      ################################################
      label:
        # Applied when:
        #  1. Propagating labels from the CHI's `metadata.labels` to child objects' `metadata.labels`,
        #  2. Propagating labels from the CHI Template's `metadata.labels` to CHI's `metadata.labels`,
        # Include labels from the following list:
        # Applied only when not empty. Empty list means "include all, no selection"
        include: []
        # Exclude labels from the following list:
        # Applied only when not empty. Empty list means "nothing to exclude, no selection"
        exclude: []
        # Whether to append *Scope* labels to StatefulSet and Pod.
        # Full list of available *scope* labels check in 'labeler.go'
        #  LabelShardScopeIndex
        #  LabelReplicaScopeIndex
        #  LabelCHIScopeIndex
        #  LabelCHIScopeCycleSize
        #  LabelCHIScopeCycleIndex
        #  LabelCHIScopeCycleOffset
        #  LabelClusterScopeIndex
        #  LabelClusterScopeCycleSize
        #  LabelClusterScopeCycleIndex
        #  LabelClusterScopeCycleOffset
        appendScope: "no"

      ################################################
      ##
      ## StatefulSet management
      ##
      ################################################
      statefulSet:
        revisionHistoryLimit: 0

      ################################################
      ##
      ## Pod management
      ##
      ################################################
      pod:
        # Grace period for Pod termination.
        # How many seconds to wait between sending
        # SIGTERM and SIGKILL during Pod termination process.
        # Increase this number is case of slow shutdown.
        terminationGracePeriod: 30

      ################################################
      ##
      ## Log parameters
      ##
      ################################################
      logger:
        logtostderr: "true"
        alsologtostderr: "false"
        v: "1"
        stderrthreshold: ""
        vmodule: ""
        log_backtrace_at: ""
